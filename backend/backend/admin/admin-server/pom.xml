<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>admin</artifactId>
        <groupId>com.backend</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>admin-server</artifactId>
    <dependencies>
        <dependency>
            <groupId>com.backend</groupId>
            <artifactId>admin-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.backend</groupId>
            <artifactId>admin-api-impl</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-eureka</artifactId>
        </dependency>
        <!--测试-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-eureka</artifactId>
        </dependency>
        <!-- 分布式服务跟踪:Spring Cloud Sleuth 主要用于收集 Spring Boot 程序中的数据，
        即上文所说的数据收集。其包含的 spring-cloud-sleuth-zipkin 模块可以把收集到的数据发送到
         zipkin 服务器。Zipkin 本身具有数据存储和展示的功能，这样，
         我们就可以在 Spring Boot 系统中埋入 Spring Cloud Sleuth 收集数据，
         在后台使用 Zipkin 服务作为数据存储和展示的服务。
        使用 Zipkin 作为后台的另一个好处是，Zipkin 除了支持 Spring Cloud Sleuth 以外，
        还支持其他开发语言和平台的数据收集器。这使得在系统中让不同种种语言开发的服务可以共存。 -->
        <!--<dependency>-->
        <!--<groupId>org.springframework.cloud</groupId>-->
        <!--<artifactId>spring-cloud-starter-zipkin</artifactId>-->
        <!--</dependency>-->
        <!-- 断路器(熔断器):是分布式系统处理超时和错误的机制.
        经常用来配合turbine使用
         1,传播安全上下文或者使用spring范围
         2,健康监控
         3,hystrix指标流 -->

        <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-netflix-turbine</artifactId>
        </dependency>
        <!-- 消息总线：消息代理中间件可以将消息路由到一个或多个目的地。（刷新配置中心配置，可以使Config实时刷新）
        可能会配合rabbitMq，spring-boot-starter-actuator一起使用
         -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bus-amqp</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-feign</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- 日志收集工具包，封装了Dapper和log-based追踪以及Zipkin和HTrace操作，
        为SpringCloud应用实现了一种分布式追踪解决方案。 -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-sleuth</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-sleuth-stream</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-hystrix</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-netflix-hystrix-stream</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream-binder-rabbit</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <dependency>
        <groupId>org.springframework.retry</groupId>
        <artifactId>spring-retry</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jolokia</groupId>
            <artifactId>jolokia-core</artifactId>
        </dependency>


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.hibernate</groupId>
                    <artifactId>hibernate-validator</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.tomcat.embed</groupId>
                    <artifactId>tomcat-embed-websocket</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-undertow</artifactId>
        </dependency>
        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-oxm</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
        </dependency>

        <!-- 持久层相关 -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.briandilley.jsonrpc4j</groupId>
            <artifactId>jsonrpc4j</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <!-- 连接池 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
        </dependency>

        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.2.2</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.2.2</version>
        </dependency>
        <dependency>
            <groupId>net.sf.dozer</groupId>
            <artifactId>dozer-spring</artifactId>
            <version>5.5.1</version>
        </dependency>
        <dependency>
            <groupId>com.backend</groupId>
            <artifactId>auth-common</artifactId>
            <version>1.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.backend</groupId>
            <artifactId>auth-client</artifactId>
            <version>1.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.backend</groupId>
            <artifactId>api-commons</artifactId>
            <version>1.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.backend</groupId>
            <artifactId>api-commons</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
    </dependencies>
    <build>
        <finalName>${project.artifactId}</finalName>

        <!--<resource>-->
        <!--<directory>src/main/resources</directory>-->
        <!--<excludes>-->
        <!--<exclude>dev/*</exclude>-->
        <!--<exclude>prod/*</exclude>-->
        <!--<exclude>test/*</exclude>-->
        <!--</excludes>-->
        <!--<filtering>false</filtering>-->
        <!--</resource>-->
        <!--</resources>-->
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <executable>true</executable>
                </configuration>
                <!--<configuration>-->
                <!--<mainClass>com.hengyunsoft.platform.admin.GxqptAdminServiceApplication</mainClass>-->
                <!--<layout>JAR</layout>-->
                <!--</configuration>-->
                <!--<executions>-->
                <!--<execution>-->
                <!--<goals>-->
                <!--<goal>repackage</goal>-->
                <!--</goals>-->
                <!--</execution>-->
                <!--</executions>-->
            </plugin>
            <!--<plugin>-->
                <!--<groupId>org.apache.maven.plugins</groupId>-->
                <!--<artifactId>maven-resources-plugin</artifactId>-->
                <!--<configuration>-->
                    <!--<encoding>UTF-8</encoding>-->
                    <!--&lt;!&ndash; 过滤后缀为pem、pfx的证书文件 &ndash;&gt;-->
                    <!--<nonFilteredFileExtensions>-->
                        <!--<nonFilteredFileExtension>pem</nonFilteredFileExtension>-->
                        <!--<nonFilteredFileExtension>pfx</nonFilteredFileExtension>-->
                        <!--<nonFilteredFileExtension>p12</nonFilteredFileExtension>-->
                        <!--<nonFilteredFileExtension>key</nonFilteredFileExtension>-->
                        <!--<nonFilteredFileExtension>xls</nonFilteredFileExtension>-->
                    <!--</nonFilteredFileExtensions>-->
                <!--</configuration>-->
            <!--</plugin>-->
            <!--<plugin>-->
                <!--<groupId>org.apache.maven.plugins</groupId>-->
                <!--<artifactId>maven-surefire-plugin</artifactId>-->
                <!--<configuration>-->
                    <!--<skip>true</skip>-->
                    <!--<includes>-->
                        <!--<include>**/*Documentation.java</include>-->
                    <!--</includes>-->
                <!--</configuration>-->
            <!--</plugin>-->
            <!--&lt;!&ndash;通过Asciidoctor使得asciidoc生成其他的文档格式，例如：PDF 或者HTML5&ndash;&gt;-->
            <!--<plugin>-->
                <!--<groupId>org.asciidoctor</groupId>-->
                <!--<artifactId>asciidoctor-maven-plugin</artifactId>-->
                <!--<version>1.5.3</version>-->
                <!--&lt;!&ndash; 文档生成配置 &ndash;&gt;-->
                <!--<configuration>-->
                    <!--<skip>true</skip>-->
                    <!--<sourceDirectory>${project.basedir}/docs/asciidoc</sourceDirectory>-->
                    <!--<sourceDocumentName>index.adoc</sourceDocumentName>-->
                    <!--<attributes>-->
                        <!--<doctype>book</doctype>-->
                        <!--<toc>left</toc>-->
                        <!--<toclevels>3</toclevels>-->
                        <!--<numbered></numbered>-->
                        <!--<hardbreaks></hardbreaks>-->
                        <!--<sectlinks></sectlinks>-->
                        <!--<sectanchors></sectanchors>-->
                        <!--<generated>${project.build.directory}/asciidoc</generated>-->
                    <!--</attributes>-->
                <!--</configuration>-->

                <!--&lt;!&ndash;因为每次执行只能处理一个后端，所以对于每个想要的输出类型，都是独立分开执行&ndash;&gt;-->
                <!--<executions>-->
                    <!--&lt;!&ndash; h5 &ndash;&gt;-->
                    <!--<execution>-->
                        <!--&lt;!&ndash; 执行的唯一ID &ndash;&gt;-->
                        <!--<id>output-html</id>-->
                        <!--<phase>test</phase>-->
                        <!--<goals>-->
                            <!--<goal>process-asciidoc</goal>-->
                        <!--</goals>-->
                        <!--<configuration>-->
                            <!--<backend>html5</backend>-->
                            <!--&lt;!&ndash;<outputDirectory>${project.basedir}/docs/asciidoc/html</outputDirectory>&ndash;&gt;-->
                        <!--</configuration>-->
                    <!--</execution>-->

                <!--</executions>-->
            <!--</plugin>-->
        </plugins>
    </build>
</project>